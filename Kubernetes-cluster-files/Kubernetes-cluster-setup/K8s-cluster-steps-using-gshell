***********************************************************************

## 1. Create 3 or 4 VMs - Master(1) and Worker (2 or 3) nodes

Nodes Reqs (varies depending on usage)
---------------------------------------

Master: 2 vCPUs - 6GB RAM
Worker: 1 vCPUs - 3GB RAM
OS:   CentOS/RHEL/Ubuntu/

****************************************************************************

2. PRE-Reqs: Disable Firewall | SWAP  | SeLinux

 ## Execute on all Worker nodes ##

 # Disable Firewall
 systemctl stop firewalld && systemctl disable firewalld
 # OR - ensure ports [6443 10250] are open

 #Disable SWAP
 swapoff -a
 sed -i.bak -r 's/(.+ swap .+)/#\1/' /etc/fstab

 #Disable SeLinux
 setenforce 0
 sed -i 's/enforcing/disabled/g' /etc/selinux/config

******************************************************************************************

 3. Download & Install - Docker | kubelet | Kubeadm | Kubectl

 # Note: Execute on all nodes (master & Nodes)

 # Kubernetes Repository
cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc//yum-key.gpg https://packages.cloud.google.com/yum/doc//rpc-package-key.gpg
exclude=kube*
EOF

 # Install Docker | Kubeadm | kubelet | Kubectl
 yum update -y
 yum install -y docker kubeadm kubelet kubectl --disableexcludes=kubernetes


 # Start and Enable docker and Kubectl
 systemctl enable docker && systemctl start docker
 systemctl enable kubelet && systemctl start kubelet


 # For CentOS and Redhat
 cat <<EOF > /etc/sysctl.d/k8s.conf
 net.bridge.bridge-nf-call-ip6tables = 1
 net.bridge.bridge-nf-call-iptables = 1
 EOF

sysctl net.bridge.bridge-nf-call-iptables=1
sysctl net.ipv4.ip_forward=1
sysctl --system



#Restart the systemd daemon and the kublet service commands:
systemctl daemon-reload
systemctl restart kubelet


******************************************************************************************************

4. Configure kubernetes "Master" Node

#Initializing master mode
kubeadm init --pod-network-cidr=10.240.0.0/16

-----------------------------------------------------

# If you want to run kubectl as "regular" user. Then execute below
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Note down Join command in below step

------------------------------------------------------------------------

# Installing Flannel network-plug-in for cluster network

When we apply init command we will get below n/w command in the output
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
kubectl get pods --all-namespaces


************************************************************************************

5. Join "worker" nodes to the cluster

# Get exact join command from previous kubeadm init command output.


***********************************************************************************

6. Testing

# Display nodes status
kubectl get nodes

#Deploying sample application
kubectl apply -f https://raw.githubusercontent.com/kubernetes/website/master/content/en/example/controllers/nginx-deployment.yaml


#Displaying Pod status
kubectl get pods -o wide
